1. Способы передачи данных между компонентами

	@Input()
	Что бы передать данные в дочерний компонент, мы можем использовать декоратор @Input(). Он позволит нам передать данные из родительского компонента в дочерний.
	
	@Output()
	Благодаря директиве @Output() мы можем привязаться к событиям дочернего компонента.
	@Input() и @Output() достаточно удобно, но не в ситуации, когда на надо передать данные в дочерний компонент, дочернего компонента и т.д., или же компоненты находятся в разных частях приложения.
	
	Сервисы
	При помощи сервисов можно получать, изменять данные и тд.
	
	Шаблонные переменные 
	<p #userName>{{name}}</p>
	через свойство userName.textContent можно получить текстовое содержимое параграфа
	Однако шаблонные переменные имеют свои ограничения: они не могут применяться вне шаблона, даже в коде класса компонента.
	
	Viewchild и Viewchildren
	
	ng-content
	Проекция контента — это способ импортировать HTML контент извне компонента и вставить его в шаблон компонента в определенное место.
	
	ng-content используется для отображения дочерних элементов в шаблоне 
	
	ng-container используется как необработанный контейнер, чтобы избежать необходимости добавлять span или div 
	
	ng-template позволяет группировать некоторый контент, который не отображается напрямую, но может использоваться в других местах вашего шаблона или кода.
	
	
	
	
	
2. Обработка событий и привязка данных
	В Angular есть четыре формы привязки данных:
	
		1. Привязка элемента DOM к значению компонента (односторонняя). В двойных фигурных скобках указывается выражение, к которому идет привязка: {{выражение}}. Например:
		<h1>Добро пожаловать {{name}}!</h1>
		
		2. Привязка свойства элемента html к значению компонента (односторонняя). Например:	
		<input type="text" [value]="name" />
		
		3. Привязка метода компонента к событию в DOM (генерация события в DOM вызывает метод на компоненте) (односторонняя). Например:
		<button (click)="addItem(text, price)">Добавить</button>
		
		4. Двусторонняя привязка, когда элемент DOM привязан к значению на компоненте, при этом изменения на одном конце привязки сразу приводят к изменениям на другом конце. Например:
		<input [(ngModel)]="name" placeholder="name" />
		
		
	В Angular все события можно отследить и обработать, привязав к ним вызов метода класса.
	<button (click)="showContacts()">Show Contacts List</button>
	
	Каждое возникающее событие передает о себе всю информацию в объекте $event, который может быть передан методу класса в качестве аргумента.
	<button on-click="showContacts($event)">
		Show Contacts List
	</button>
	
	Свойства объекта $event:
	    - target - элемент DOM, выступивший инициатором;
		- target.value - значение элемента DOM (справедливо для полей формы);
		- keyCode - код клавиши (справедливо для keyup).
		
	Наиболее распространенные события:
		- click - нажатие кнопки мыши;
		- mouseenter/mouseleave - наведение/уход курсора мыши на/с элемента;
		- change - изменение состояние элемента, применяется к полям формы;
		- focus - элемента получает фокус, т.е. становится активным;
		- blur - потеря элементом фокуса;
		- keyup - возникает, когда отпускается нажатая клавиша.

	Для удобства в Angular предусмотрено так называемое псевдо событие keyup.{keyCode}, которое будет инициировано только в том случае, если будет нажата определенная клавиша. 
	Например, для отслеживания нажатия Enter используется keyup.enter
	
	Еще есть прокидывание событий в дочернюю компоненту через EventEmitter
	
3. Жизненный цикл компонентов и хуков

	ngOnChanges: вызывается до метода ngOnInit() при начальной установке свойств, которые связаны механизмом привязки, а также при любой их переустановке или изменении их значений. Данный метод в качестве параметра принимает объект класса SimpleChanges, который содержит предыдущие и текущие значения свойства.
	
	ngOnInit: вызывается один раз после установки свойств компонента, которые участвуют в привязке. Выполняет инициализацию компонента
	
	ngDoCheck: вызывается при каждой проверке изменений свойств компонента сразу после методов ngOnChanges и ngOnInit
	
	ngAfterContentInit: вызывается один раз после метода ngDoCheck() после вставки содержимого в представление компонента кода html
	
	ngAfterContentChecked: вызывается фреймворком Angular при проверке изменений содержимого, которое добавляется в представление компонента. Вызывается после метода ngAfterContentInit() и после каждого последующего вызова метода ngDoCheck().
	
	ngAfterViewInit: вызывается фреймворком Angular после инициализации представления компонента, а также представлений дочерних компонентов. Вызывается только один раз сразу после первого вызова метода ngAfterContentChecked()
	
	ngAfterViewChecked: вызывается фреймворком Angular после проверки на изменения в представлении компонента, а также проверки представлений дочерних компонентов. Вызывается после первого вызова метода ngAfterViewInit() и после каждого последующего вызова ngAfterContentChecked()
	
	ngOnDestroy: вызывается перед тем, как фреймворк Angular удалит компонент.
	
	

